import java.awt.geom.Rectangle2D;

public class Mandelbrot extends FractalGenerator {
    public static final int MAX_ITERATIONS = 2000;
/**–ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏**/
	    public void getInitialRange(Rectangle2D.Double r)

		{
			r.x = -2;
			r.y = -1.5;
			r.width = 3;
			r.height = 3;
	    }
/** —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ç–∞–ª–∞ –ú–∞–Ω–¥–µ–ª—å–±—Ä–æ—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã ùëßùëõ= ùëßùëõ‚àí12+ùëê.**/
	    public int numIterations(double x, double y) {
			int count = 0;
			double re = 0;
			double im = 0;
			double z_n2 = 0;
			//—Å–æ—Å—Ç–∞–≤–∏–º —Ñ–æ—Ä–º—É–ª—É
			while (count < MAX_ITERATIONS && z_n2 < 4) {
			    count++;
			    
			    double nextRe = Math.pow(re, 2) - Math.pow(im, 2) + x;
			    double nextIm = 2 * re * im + y;

			    z_n2 = Math.pow(nextRe, 2) + Math.pow(nextIm, 2);

			    re = nextRe;
			    im = nextIm;	   
			}

			return count < MAX_ITERATIONS ? count : -1;
	    }
	    
	    public static String getString() {
			return "Mandelbrot";
    	}
}